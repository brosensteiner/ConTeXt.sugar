<?xml version="1.0" encoding="UTF-8"?>

<itemizer>

<!--docunent blocks (starttext, startsection, table ...)-->	
	
	<recipe name="context.structural.startsections">
	
		<class>ESXMLItem</class>
		<start-selector>context.structural.start-section:capture(name)</start-selector>
		<end-selector>context.structural.stop-section</end-selector>
		<subrecipes>	
			<include-root-recipes />
		</subrecipes>
		
	</recipe>
	
	<recipe name="context.structural.sections">
	
		<class>ESXMLItem</class>
		<selector>context.structural.section:capture(itemizer-firstused) + balanced.brace:capture(name)</selector>
		
	</recipe>
	
	<recipe name="context.structural.table">
	
		<class>ESXMLItem</class>
		<start-selector>context.structural.start-table:capture(name)</start-selector>
		<end-selector>context.structural.stop-table</end-selector>
		<subrecipes>	
			<include-root-recipes />
		</subrecipes>
		
	</recipe>
	
<!-- [] -->
<!-- MacRabbit told me that it is currently not possible to have code folding and no entry in the Navigator - this here makes no sense in the Navigator (would fill it completely up): -->	
	<!--<recipe name="context.container.codeblock">

		<start-selector>context.openbracket.level0</start-selector>
		<end-selector>context.closebracket.level0</end-selector>
		
	</recipe>-->
	
<!--floats-->
	<recipe name="context.structural.startfloats">
	
		<class>ESXMLItem</class>
		<start-selector>context.structural.start-float:capture(name)</start-selector>
		<end-selector>context.structural.stop-float</end-selector>
		<subrecipes>	
			<include-root-recipes />
		</subrecipes>
		
	</recipe>
	
	<recipe name="context.float">
		<class>ESXMLItem</class>
		<selector>context.float:capture(name)</selector>
	</recipe>

<!--Metafun code block-->		 
	<recipe name="context.container.metafun-code-block">
	
		<class>ESCodeClassItem</class>
		<start-selector>context.support.function.start.metafun:capture(name)</start-selector>
		<end-selector>context.support.function.stop.metafun</end-selector>
		<subrecipes>
			<include recipe="context.container.environment"/>
			<include-root-recipes />
		</subrecipes>
	
	</recipe>
	
<!--Lua code block-->		 
	<recipe name="context.container.lua-code-block">
	
		<class>ESCodeClassItem</class>
		<start-selector>context.support.function.start.lua:capture(name)</start-selector>
		<end-selector>context.support.function.stop.lua</end-selector>
		<subrecipes>
			<include recipe="context.container.environment"/>
			<include-root-recipes />
		</subrecipes>
	
	</recipe>
	
	<recipe name="context.container.lua-code-block-single-line">
		<class>ESCodeClassItem</class>
		<selector>context.container.language-root.lua.oneline:has-child(oneline-lua:capture(name))</selector>
	</recipe>
	
<!--\start... \stop...-->		 
	<recipe name="context.container.environment">
	
		<class>ESXMLItem</class>
		<start-selector>context.support.function.start.environment:capture(name)</start-selector>
		<end-selector>context.support.function.stop.environment</end-selector>
		<subrecipes>
			<include recipe="context.container.environment"/>
			<include-root-recipes />
		</subrecipes>
	
	</recipe>
	
<!--unprotext/protect-->
	<recipe name="context.container.unprotect-protect">
	
		<class>ESCodeClassItem</class>
		<start-selector>context.start-protect:capture(name)</start-selector>
		<end-selector>context.stop-protect</end-selector>
		<subrecipes>
			<include recipe="context.container.environment"/>
			<include-root-recipes />
		</subrecipes>
	
	</recipe>


	<recipe name="context.container.startstop">
	
		<class>ESXMLItem</class>
		<start-selector>language-root.context > support.function.start.environment:capture(name)</start-selector>
		<end-selector>language-root.context > support.function.stop.environment</end-selector>
		<subrecipes>	
			<include-root-recipes />
		</subrecipes>
	
	</recipe>
	
<!--metapost control block-->	
	<recipe name="metapost.container.control.for">
		<class>ESJSControlBlockItem</class>
		<start-selector>metafun.keyword.control[text='for']:capture(itemizer-firstused) + *:capture(open-parameters) ~ metafun.keyword.control[text=':']:capture(close-parameters)</start-selector>
		<end-selector>metafun.keyword.control[text='endfor']</end-selector>
		<subrecipes>
			<include recipe="metapost.container.control.for"/>
		</subrecipes>
	</recipe>
<!--metapost macro def-->
	<recipe name="metapost.container.function">
		<start-selector>metafun.storage.definition.begin:capture(itemizer-firstused) + *:capture(name)</start-selector>
		<end-selector>metafun.storage.definition.end</end-selector>
		<subrecipes>
			<include recipe="metapost.container.control.for"/>
		</subrecipes>
	</recipe>
	
<!--define/def...-->	
	<recipe name="context.container.support.function">
		<selector>context.function.define > support.function.name:capture(name)</selector>
	</recipe>

<!--math: math is really special in TeX so it deserves a place in the Navigator :)-->
<recipe name="tex.container.math">

	<class>ESCodeClassItem</class>
	<start-selector>math > begin.math:capture(name)</start-selector>
	<end-selector>math > end.math</end-selector>
	<subrecipes>
		<include-root-recipes />
	</subrecipes>

</recipe>
	
</itemizer>


